<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>熠熙轻雷</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://devying.github.io/"/>
  <updated>2019-11-09T15:04:23.339Z</updated>
  <id>https://devying.github.io/</id>
  
  <author>
    <name>Devying</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang变量和常量</title>
    <link href="https://devying.github.io/2019/11/09/golang%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/"/>
    <id>https://devying.github.io/2019/11/09/golang变量和常量/</id>
    <published>2019-11-08T16:23:02.000Z</published>
    <updated>2019-11-09T15:04:23.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Go变量总是有固定的数据类型，类型决定了变量内存的长度和存储格式。我们只能修改变量值，无法改变类型。</p><p><strong>通过类型转换或者指针操作，我们可以用不同方式修改变量值，但是这并不意味着改变了变量类型。</strong></p><h3 id="关键字var"><a href="#关键字var" class="headerlink" title="关键字var"></a>关键字var</h3><p>可以用于定义变量，运行时内存分配操作会确保变量自动初始化为二进制零值，避免出现不可预测行为。如果显式提供初始化值，可以省略变量类型，由编译器推断。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span>   <span class="comment">//自动初始化为 0</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">false</span> <span class="comment">//自动推断为bool类型</span></span><br><span class="line"><span class="keyword">var</span> z <span class="keyword">int</span> = <span class="number">0</span> <span class="comment">//可以省略int</span></span><br></pre></td></tr></table></figure><p>一次性定义多个变量</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span>,<span class="symbol">y</span> int <span class="comment">//相同类型的多个变量</span></span><br><span class="line"><span class="keywords">var</span> a,s = <span class="number">100</span>, <span class="string">"abc"</span> <span class="comment">//不同类型初始化值</span></span><br></pre></td></tr></table></figure><p>按照惯例，以组的方式整理多行变量定义。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> (</span><br><span class="line">    <span class="symbol">x</span>, <span class="symbol">y</span> int</span><br><span class="line">    a, s = <span class="number">300</span>, <span class="string">"abc"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="简短模式"><a href="#简短模式" class="headerlink" title="简短模式"></a>简短模式</h3><p>除了var 关键字还可以用更简短的变量定义和初始化语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">100</span></span><br><span class="line">a,s := <span class="number">1</span>, <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><p>简短模式有一些限制：</p><ul><li>定义变量，同时显式初始化</li><li>不能提供数据类型</li><li>只能用在函数内部</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">100</span> <span class="comment">//全局变量</span></span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>,<span class="symbol">x</span>)</span><br><span class="line">    <span class="symbol">x</span>:=<span class="string">"abc"</span> <span class="comment">//重新定义和初始化同名局部变量，局部有效</span></span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>,<span class="symbol">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序运行结果：</span><br><span class="line">两个&amp;<span class="symbol">x</span> 内存地址不一样，<span class="symbol">x</span>值也不一样，可以看出是两个不同的变量</span><br></pre></td></tr></table></figure><p><strong>简短模式在函数多值返回，以及if/for/switch等语句中定义局部变量非常方便</strong></p><p>简短模式并不总是重新定义变量的，还有可能是部分退化的赋值操作。另外退化赋值的前提条件是至少有一个新变量被定义，且在同一作用域。常见在函数返回err时，始终重复使用err变量</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">    <span class="symbol">x</span> := <span class="number">100</span></span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>)</span><br><span class="line">    <span class="symbol">x</span>, <span class="symbol">y</span> := <span class="number">20</span>,<span class="string">"abc"</span> <span class="comment">//</span></span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>,<span class="symbol">x</span>,<span class="symbol">y</span>)<span class="comment">//&amp;x是同一个 x这是退化赋值</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="symbol">x</span>,<span class="symbol">y</span> := <span class="number">12</span>,<span class="number">12</span> <span class="comment">//作用域不同，这里都是重新定义变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未使用错误"><a href="#未使用错误" class="headerlink" title="未使用错误"></a>未使用错误</h3><p>编译的时候未使用的局部变量会报错，而全局变量不会。</p><h3 id="空标识符"><a href="#空标识符" class="headerlink" title="空标识符_"></a>空标识符_</h3><p>空标识符可临时用来规避编译器对未使用的变量或包的错误检查，但是请注意它是预置成员，不能重新定义。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量表示运行时恒定不可改变的值，通常是一些字面量。<br>常量必须是编译期可确定的<code>字符</code>、<code>字符串</code>、<code>数字</code>、<code>布尔值</code>，可指定常量类型或者由编译器通过初始化推断。不曾使用的常量不会编译报错。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x,y <span class="built_in">int</span> = <span class="number">123</span>,<span class="number">0x22</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">'哈'</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    i,f = <span class="number">123</span>,<span class="number">2.3</span> <span class="comment">//int，float64(默认)</span></span><br><span class="line">    b = <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line">func main()&#123;</span><br><span class="line">    <span class="keyword">const</span> s = <span class="number">45</span> <span class="comment">//可以在不同作用域定义同名常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以是编译器可以计算出来的表达式(比如unsafe.Sizeof，cap,len等)，范围必须要正确</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">    x, y = <span class="number">99</span>, <span class="number">-999</span></span><br><span class="line">    b byte = byte(<span class="name">x</span>) //b 是byte类型，必须显式的将x转为byte</span><br><span class="line">    n  = uint8(<span class="name">y</span>)  //错误范围溢出 </span><br><span class="line"></span><br><span class="line">    ptrSize = unsafe.Sizeof(<span class="name">uintptr</span>(<span class="number">0</span>))</span><br><span class="line">    strSize = len(<span class="string">"hello"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在常量组中，如不指定类型和初始化值，则与上一行非空常量右值相同</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    x <span class="built_in">uint</span>16 = <span class="number">120</span> </span><br><span class="line">    y                <span class="comment">//与上一行x  右值、类型相同</span></span><br><span class="line">    s = <span class="string">"abc"</span></span><br><span class="line">    z                <span class="comment">//与上一行s  右值、类型相同</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Go没有明确意义上的enum定义，但是可以借助<code>iota</code>标识符实现一组自增常量值，来实现枚举类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    x = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    y        <span class="comment">//1</span></span><br><span class="line">    z        <span class="comment">//2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _  = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    KB =  <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)     <span class="comment">// 1 &lt;&lt; (10 * 1)</span></span><br><span class="line">    MB                         <span class="comment">// 1 &lt;&lt; (10 * 2)</span></span><br><span class="line">    GB                         <span class="comment">// 1 &lt;&lt; (10 * 3)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>自增作用范围为常量组。可以在多常量定义中使用多个iota，它们各自单独计数，只需要确保组中每行常量个数相同即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">(</span></span><br><span class="line">    <span class="string">_,</span> <span class="string">_</span> <span class="string">=</span> <span class="string">iota</span> <span class="string">,iota</span> <span class="string">*</span> <span class="number">10</span>     <span class="string">//</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span> <span class="string">*</span> <span class="number">10</span></span><br><span class="line">    <span class="string">a,</span> <span class="string">b</span>                       <span class="string">//</span> <span class="number">1</span><span class="string">,</span> <span class="number">1</span> <span class="string">*</span> <span class="number">10</span></span><br><span class="line">    <span class="string">c,</span> <span class="string">d</span>                       <span class="string">//</span> <span class="number">2</span><span class="string">,</span> <span class="number">2</span> <span class="string">*</span> <span class="number">10</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><p>如果中断iota自增，必须显式恢复，切后续自增值按行序递增。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a  = <span class="literal">iota</span>     <span class="comment">//0</span></span><br><span class="line">    b             <span class="comment">//1</span></span><br><span class="line">    c  = <span class="number">100</span>      <span class="comment">//100</span></span><br><span class="line">    d             <span class="comment">//100 与上一行保持一致</span></span><br><span class="line">    e  = <span class="literal">iota</span>     <span class="comment">//4 恢复iota,行序递增</span></span><br><span class="line">    f             <span class="comment">//5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>自增默认类型为int,当然你可以显示的指定类型</p><h3 id="常量和变量区别"><a href="#常量和变量区别" class="headerlink" title="常量和变量区别"></a>常量和变量区别</h3><p>常量是只读，不能取地址。数字常量不会分配存储空间，无需像变量那要通过内存寻址来取值，因此无法获取地址。<br>变量在运行期分配存储内存（非优化状态）常量通常会被编译器在预处理阶段直接展开，作为指令数据使用。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">100</span>      <span class="comment">//无类型声明的常量</span></span><br><span class="line"><span class="keyword">const</span> y byte = x   <span class="comment">//直接展开x,相当于const y byte = 100</span></span><br><span class="line"><span class="keyword">const</span> a <span class="built_in">int</span> = <span class="number">100</span>  <span class="comment">//显式指定常量类型，编译器会做强类型检查</span></span><br><span class="line"><span class="keyword">const</span> b byte = a   <span class="comment">//错误，can not use a （type int）as type byte in const initializer</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;Go变量总是有固定的数据类型，类型决定了变量内存的长度和存储格式。我们只能修改变量值，无法改变类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过类型
      
    
    </summary>
    
    
      <category term="golang" scheme="https://devying.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://devying.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang性能分析工具</title>
    <link href="https://devying.github.io/2019/11/09/golang%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>https://devying.github.io/2019/11/09/golang性能分析工具/</id>
    <published>2019-11-08T16:23:02.000Z</published>
    <updated>2019-11-11T07:33:49.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>pprof 类似于php的xhprof，在代码运行期间进行CPU、内存等指标采样，拿到采样数据后可以进行分析，还可以绘制成可视化的图，方便排查性能瓶颈。在go语言中使用的是官方提供的两个包<code>runtime/pprof</code>和<code>net/http/pprof</code>，分别用在脚本方式运行的程序和http server方式运行的程序中。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置</li><li>Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏</li><li>Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置</li><li>Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="演示1：分析一个简单的脚本性能。"><a href="#演示1：分析一个简单的脚本性能。" class="headerlink" title="演示1：分析一个简单的脚本性能。"></a>演示1：分析一个简单的脚本性能。</h5><p>由于<code>runtime/pprof</code>包没有封装使用起来不方便，可以使用<code>github.com/pkg/profile</code>替换。<br>操作步骤:</p><ul><li>执行脚本得到分析样本</li><li>使用go tool pprof 命令分析样本 <blockquote><p>go tool pprof [-http=:8080] [binfile] pproffile</p></blockquote></li></ul><h5 id="演示2：分析task-center服务CPU概况。"><a href="#演示2：分析task-center服务CPU概况。" class="headerlink" title="演示2：分析task_center服务CPU概况。"></a>演示2：分析task_center服务CPU概况。</h5><p>操作步骤:</p><ul><li>执行压测命令wrk<blockquote><p>wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址</p></blockquote></li><li>采集样本<blockquote><p>go tool pprof -seconds=3 <a href="http://10.77..39.89:6608/debug/pprof/profile" target="_blank" rel="noopener">http://10.77..39.89:6608/debug/pprof/profile</a><br>注意这个seconds 不要超过http设置的WriteTimeout值。</p></blockquote></li><li>使用go tool pprof 命令分析样本 <blockquote><p>go tool pprof [-http=:8080] [binfile] pprof_file</p></blockquote><h5 id="演示3：分析task-center服务内存概况。"><a href="#演示3：分析task-center服务内存概况。" class="headerlink" title="演示3：分析task_center服务内存概况。"></a>演示3：分析task_center服务内存概况。</h5></li></ul><p>操作步骤:</p><ul><li>执行压测命令wrk<blockquote><p>wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址</p></blockquote></li><li>采集样本<blockquote><p>go tool  pprof  -seconds=3  <a href="http://127.0.0.1:8080/debug/pprof/heap" target="_blank" rel="noopener">http://127.0.0.1:8080/debug/pprof/heap</a><br>默认情况下只分析当前活跃对象使用到的内存 可以追加 <code>-alloc_objects</code>(临时分配内存) <code>-inuse_objects</code>（正在使用的对象分配内存） <code>-alloc_space</code>(自程序运行依赖一共分配了多少内存) <code>-inuse_space</code>(常驻内存)等选项查看相应的内存概况</p></blockquote></li><li>使用go tool pprof 命令分析样本 <blockquote><p>go tool pprof [-http=:8080] [binfile] pprof_file</p></blockquote></li></ul><h3 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>在引入执行trace程序之前，已经有了pprof内存和CPU分析器，那么为什么它还会被添加到官方的工具链中呢？虽然CPU分析器做了一件很好的工作，告诉你什么函数占用了最多的CPU时间，但它并不能帮助你确定是什么阻止了goroutine运行，或者在可用的OS线程上如何调度goroutines。这正是跟踪器真正起作用的地方。trace设计文档很好地解释了跟踪程序背后的动机以及它是如何被设计和工作的。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="演示1：分析一个简单的脚本trace信息"><a href="#演示1：分析一个简单的脚本trace信息" class="headerlink" title="演示1：分析一个简单的脚本trace信息"></a>演示1：分析一个简单的脚本trace信息</h5><p>操作步骤:</p><ul><li>执行脚本得到分析样本</li><li>使用go tool trace 命令分析样本 <blockquote><p>go tool trace trace_file</p></blockquote></li></ul><h5 id="演示2：分析task-center的trace信息"><a href="#演示2：分析task-center的trace信息" class="headerlink" title="演示2：分析task_center的trace信息"></a>演示2：分析task_center的trace信息</h5><p>操作步骤:</p><ul><li><p>执行压测命令wrk</p><blockquote><p>wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址</p></blockquote></li><li><p>采集样本</p><blockquote><p>curl <a href="http://127.0.0.1:6608/debug/pprof/trace" target="_blank" rel="noopener">http://127.0.0.1:6608/debug/pprof/trace</a>  &gt; trace.out</p></blockquote></li><li><p>使用go tool pprof 命令分析样本 </p><blockquote><p>go tool trace [-http=addr:port] trace_file</p></blockquote></li></ul><h4 id="指标含义"><a href="#指标含义" class="headerlink" title="指标含义"></a>指标含义</h4><h5 id="View-trace"><a href="#View-trace" class="headerlink" title="View trace"></a>View trace</h5><p>最复杂、最强大和交互式的可视化显示了整个程序执行的时间轴。这个视图显示了在每个虚拟处理器上运行着什么，以及什么是被阻塞等待运行的。</p><h5 id="Goroutine-analysis"><a href="#Goroutine-analysis" class="headerlink" title="Goroutine analysis"></a>Goroutine analysis</h5><p>显示了在整个执行过程中，每种类型的goroutines是如何创建的。在选择一种类型之后就可以看到关于这种类型的goroutine的信息。例如，在试图从mutex获取锁、从网络读取、运行等等每个goroutine被阻塞的时间。</p><h5 id="Network-Sync-Syscall-blocking-profile"><a href="#Network-Sync-Syscall-blocking-profile" class="headerlink" title="Network/Sync/Syscall blocking profile"></a>Network/Sync/Syscall blocking profile</h5><p>这些图表显示了goroutines在这些资源上所花费的时间。它们非常接近pprof上的内存/cpu分析。这是分析锁竞争的最佳选择。</p><h5 id="Scheduler-latency-profiler"><a href="#Scheduler-latency-profiler" class="headerlink" title="Scheduler latency profiler"></a>Scheduler latency profiler</h5><p>为调度器级别的信息提供计时功能，显示调度在哪里最耗费时间。</p><p>###参考</p><ul><li><a href="https://www.youtube.com/watch?v=nok0aYiGiYA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=nok0aYiGiYA</a></li><li><a href="https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/" target="_blank" rel="noopener">https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/</a></li><li><a href="https://www.itcodemonkey.com/article/5419.html" target="_blank" rel="noopener">https://www.itcodemonkey.com/article/5419.html</a></li><li><a href="https://making.pusher.com/go-tool-trace/" target="_blank" rel="noopener">https://making.pusher.com/go-tool-trace/</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/pkg/profile"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := profile.Start(profile.CPUProfile,profile.ProfilePath(<span class="string">"./"</span>))</span><br><span class="line"><span class="keyword">defer</span> p.Stop()</span><br><span class="line">f, err := os.OpenFile(<span class="string">"/Users/baoying5/Downlosdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfadfasdfasdfasdfasdfads/new.csv"</span>, os.O_RDONLY, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">bfio := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line">am := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line">bm := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">l, _, err := bfio.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">uid, err := strconv.Atoi(<span class="keyword">string</span>(l))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> uid &gt; <span class="number">3000232374</span> &#123;</span><br><span class="line">a++</span><br><span class="line">am[uid] = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b++</span><br><span class="line">bm[uid] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//println(string(l))</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pprof&quot;&gt;&lt;a href=&quot;#pprof&quot; class=&quot;headerlink&quot; title=&quot;pprof&quot;&gt;&lt;/a&gt;pprof&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介
      
    
    </summary>
    
    
      <category term="golang" scheme="https://devying.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://devying.github.io/tags/golang/"/>
    
      <category term="工具" scheme="https://devying.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>

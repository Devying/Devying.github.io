<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>熠熙轻雷</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://devying.github.io/"/>
  <updated>2019-11-12T07:32:08.836Z</updated>
  <id>https://devying.github.io/</id>
  
  <author>
    <name>Devying</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang变量和常量</title>
    <link href="https://devying.github.io/2019/11/09/golang%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/"/>
    <id>https://devying.github.io/2019/11/09/golang变量和常量/</id>
    <published>2019-11-08T16:23:02.000Z</published>
    <updated>2019-11-12T07:32:08.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Go变量总是有固定的数据类型，类型决定了变量内存的长度和存储格式。我们只能修改变量值，无法改变类型。</p><p><strong>通过类型转换或者指针操作，我们可以用不同方式修改变量值，但是这并不意味着改变了变量类型。</strong></p><h3 id="关键字var"><a href="#关键字var" class="headerlink" title="关键字var"></a>关键字var</h3><p>可以用于定义变量，运行时内存分配操作会确保变量自动初始化为二进制零值，避免出现不可预测行为。如果显式提供初始化值，可以省略变量类型，由编译器推断。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span>   <span class="comment">//自动初始化为 0</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">false</span> <span class="comment">//自动推断为bool类型</span></span><br><span class="line"><span class="keyword">var</span> z <span class="keyword">int</span> = <span class="number">0</span> <span class="comment">//可以省略int</span></span><br></pre></td></tr></table></figure><p>一次性定义多个变量</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span>,<span class="symbol">y</span> int <span class="comment">//相同类型的多个变量</span></span><br><span class="line"><span class="keywords">var</span> a,s = <span class="number">100</span>, <span class="string">"abc"</span> <span class="comment">//不同类型初始化值</span></span><br></pre></td></tr></table></figure><p>按照惯例，以组的方式整理多行变量定义。</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> (</span><br><span class="line">    <span class="symbol">x</span>, <span class="symbol">y</span> int</span><br><span class="line">    a, s = <span class="number">300</span>, <span class="string">"abc"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="简短模式"><a href="#简短模式" class="headerlink" title="简短模式"></a>简短模式</h3><p>除了var 关键字还可以用更简短的变量定义和初始化语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">100</span></span><br><span class="line">a,s := <span class="number">1</span>, <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><p>简短模式有一些限制：</p><ul><li>定义变量，同时显式初始化</li><li>不能提供数据类型</li><li>只能用在函数内部</li></ul><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">100</span> <span class="comment">//全局变量</span></span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>,<span class="symbol">x</span>)</span><br><span class="line">    <span class="symbol">x</span>:=<span class="string">"abc"</span> <span class="comment">//重新定义和初始化同名局部变量，局部有效</span></span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>,<span class="symbol">x</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以上程序运行结果：</span><br><span class="line">两个&amp;<span class="symbol">x</span> 内存地址不一样，<span class="symbol">x</span>值也不一样，可以看出是两个不同的变量</span><br></pre></td></tr></table></figure><p><strong>简短模式在函数多值返回，以及if/for/switch等语句中定义局部变量非常方便</strong></p><p>简短模式并不总是重新定义变量的，还有可能是部分退化的赋值操作。另外退化赋值的前提条件是至少有一个新变量被定义，且在同一作用域。常见在函数返回err时，始终重复使用err变量</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">    <span class="symbol">x</span> := <span class="number">100</span></span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>)</span><br><span class="line">    <span class="symbol">x</span>, <span class="symbol">y</span> := <span class="number">20</span>,<span class="string">"abc"</span> <span class="comment">//</span></span><br><span class="line">    fmt.Println(&amp;<span class="symbol">x</span>,<span class="symbol">x</span>,<span class="symbol">y</span>)<span class="comment">//&amp;x是同一个 x这是退化赋值</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="symbol">x</span>,<span class="symbol">y</span> := <span class="number">12</span>,<span class="number">12</span> <span class="comment">//作用域不同，这里都是重新定义变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未使用错误"><a href="#未使用错误" class="headerlink" title="未使用错误"></a>未使用错误</h3><p>编译的时候未使用的局部变量会报错，而全局变量不会。</p><h3 id="空标识符"><a href="#空标识符" class="headerlink" title="空标识符_"></a>空标识符_</h3><p>空标识符可临时用来规避编译器对未使用的变量或包的错误检查，但是请注意它是预置成员，不能重新定义。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量表示运行时恒定不可改变的值，通常是一些字面量。<br>常量必须是编译期可确定的<code>字符</code>、<code>字符串</code>、<code>数字</code>、<code>布尔值</code>，可指定常量类型或者由编译器通过初始化推断。不曾使用的常量不会编译报错。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x,y <span class="built_in">int</span> = <span class="number">123</span>,<span class="number">0x22</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">'哈'</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    i,f = <span class="number">123</span>,<span class="number">2.3</span> <span class="comment">//int，float64(默认)</span></span><br><span class="line">    b = <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line">func main()&#123;</span><br><span class="line">    <span class="keyword">const</span> s = <span class="number">45</span> <span class="comment">//可以在不同作用域定义同名常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以是编译器可以计算出来的表达式(比如unsafe.Sizeof，cap,len等)，范围必须要正确</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">    x, y = <span class="number">99</span>, <span class="number">-999</span></span><br><span class="line">    b byte = byte(<span class="name">x</span>) //b 是byte类型，必须显式的将x转为byte</span><br><span class="line">    n  = uint8(<span class="name">y</span>)  //错误范围溢出 </span><br><span class="line"></span><br><span class="line">    ptrSize = unsafe.Sizeof(<span class="name">uintptr</span>(<span class="number">0</span>))</span><br><span class="line">    strSize = len(<span class="string">"hello"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在常量组中，如不指定类型和初始化值，则与上一行非空常量右值相同</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    x <span class="built_in">uint</span>16 = <span class="number">120</span> </span><br><span class="line">    y                <span class="comment">//与上一行x  右值、类型相同</span></span><br><span class="line">    s = <span class="string">"abc"</span></span><br><span class="line">    z                <span class="comment">//与上一行s  右值、类型相同</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Go没有明确意义上的enum定义，但是可以借助<code>iota</code>标识符实现一组自增常量值，来实现枚举类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    x = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    y        <span class="comment">//1</span></span><br><span class="line">    z        <span class="comment">//2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _  = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    KB =  <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)     <span class="comment">// 1 &lt;&lt; (10 * 1)</span></span><br><span class="line">    MB                         <span class="comment">// 1 &lt;&lt; (10 * 2)</span></span><br><span class="line">    GB                         <span class="comment">// 1 &lt;&lt; (10 * 3)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>自增作用范围为常量组。可以在多常量定义中使用多个iota，它们各自单独计数，只需要确保组中每行常量个数相同即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">const</span> <span class="string">(</span></span><br><span class="line">    <span class="string">_,</span> <span class="string">_</span> <span class="string">=</span> <span class="string">iota</span> <span class="string">,iota</span> <span class="string">*</span> <span class="number">10</span>     <span class="string">//</span> <span class="number">0</span><span class="string">,</span> <span class="number">0</span> <span class="string">*</span> <span class="number">10</span></span><br><span class="line">    <span class="string">a,</span> <span class="string">b</span>                       <span class="string">//</span> <span class="number">1</span><span class="string">,</span> <span class="number">1</span> <span class="string">*</span> <span class="number">10</span></span><br><span class="line">    <span class="string">c,</span> <span class="string">d</span>                       <span class="string">//</span> <span class="number">2</span><span class="string">,</span> <span class="number">2</span> <span class="string">*</span> <span class="number">10</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><p>如果中断iota自增，必须显式恢复，切后续自增值按行序递增。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a  = <span class="literal">iota</span>     <span class="comment">//0</span></span><br><span class="line">    b             <span class="comment">//1</span></span><br><span class="line">    c  = <span class="number">100</span>      <span class="comment">//100</span></span><br><span class="line">    d             <span class="comment">//100 与上一行保持一致</span></span><br><span class="line">    e  = <span class="literal">iota</span>     <span class="comment">//4 恢复iota,行序递增</span></span><br><span class="line">    f             <span class="comment">//5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>自增默认类型为int,当然你可以显示的指定类型</p><h3 id="常量和变量区别"><a href="#常量和变量区别" class="headerlink" title="常量和变量区别"></a>常量和变量区别</h3><p>常量是只读，不能取地址。数字常量不会分配存储空间，无需像变量那要通过内存寻址来取值，因此无法获取地址。<br>变量在运行期分配存储内存（非优化状态）常量通常会被编译器在预处理阶段直接展开，作为指令数据使用。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">100</span>      <span class="comment">//无类型声明的常量</span></span><br><span class="line"><span class="keyword">const</span> y byte = x   <span class="comment">//直接展开x,相当于const y byte = 100</span></span><br><span class="line"><span class="keyword">const</span> a <span class="built_in">int</span> = <span class="number">100</span>  <span class="comment">//显式指定常量类型，编译器会做强类型检查</span></span><br><span class="line"><span class="keyword">const</span> b byte = a   <span class="comment">//错误，can not use a （type int）as type byte in const initializer</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;Go变量总是有固定的数据类型，类型决定了变量内存的长度和存储格式。我们只能修改变量值，无法改变类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过类型
      
    
    </summary>
    
    
      <category term="golang" scheme="https://devying.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://devying.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang数据类型总结</title>
    <link href="https://devying.github.io/2019/10/12/golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <id>https://devying.github.io/2019/10/12/golang数据类型总结/</id>
    <published>2019-10-11T16:23:02.000Z</published>
    <updated>2019-11-12T07:31:53.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><table><thead><tr><th>类型</th><th>长度</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>bool</td><td>1</td><td>false</td><td></td></tr><tr><td>byte</td><td>1</td><td>0</td><td>uint8</td></tr><tr><td>rune</td><td>4</td><td>0</td><td>Unicode Code Point, int32</td></tr><tr><td>int, uint</td><td>4或8</td><td>0</td><td>32 或 64 位</td></tr><tr><td>int8, uint8</td><td>1</td><td>0</td><td>-128 ~ 127, 0 ~ 255</td></tr><tr><td>int16, uint16</td><td>2</td><td>0</td><td>-32768 ~ 32767, 0 ~ 65535</td></tr><tr><td>int32, uint32</td><td>4</td><td>0</td><td>-21亿~ 21亿, 0 ~ 42亿</td></tr><tr><td>int64, uint64</td><td>8</td><td>0</td><td></td></tr><tr><td>float32</td><td>4</td><td>0.0</td><td></td></tr><tr><td>float64</td><td>8</td><td>0.0</td><td></td></tr><tr><td>complex64</td><td>8</td><td></td><td></td></tr><tr><td>complex128</td><td>16</td><td></td><td></td></tr><tr><td>uintptr</td><td>4或8</td><td></td><td>⾜足以存储指针的 uint32 或 uint64整数</td></tr><tr><td>array</td><td></td><td></td><td>值类型</td></tr><tr><td>struct</td><td></td><td></td><td>值类型</td></tr><tr><td>string</td><td></td><td>“”</td><td>UTF-8 字符串</td></tr><tr><td>slice</td><td></td><td>nil</td><td>引⽤用类型</td></tr><tr><td>map</td><td></td><td>nil</td><td>引⽤用类型</td></tr><tr><td>channel</td><td></td><td>nil</td><td>引⽤用类型</td></tr><tr><td>interface</td><td></td><td>nil</td><td>接⼝</td></tr><tr><td>function</td><td></td><td>nil</td><td>函数</td></tr></tbody></table><p>支持八进制，十六进制以及科学计数法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c := <span class="number">100</span>,<span class="number">0144</span>,<span class="number">0</span>x64</span><br><span class="line">fmt.Println(<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c)  <span class="comment">//100,100,100</span></span><br><span class="line">fmt.Printf(<span class="string">"0b%b,%#o,%#x"</span>,<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c)<span class="comment">//0b1100100,0144,0x64</span></span><br><span class="line">fmt.Prinln(math<span class="selector-class">.MaxInt8</span>,math,MinInt8)<span class="comment">//127,-128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进制转换到十进制</span></span><br><span class="line"><span class="selector-tag">a</span>,_ := strconv.ParseInt(<span class="string">"1100100"</span>,<span class="number">2</span>,<span class="number">32</span>)  <span class="comment">//100</span></span><br><span class="line"><span class="selector-tag">b</span>,_ := strconv.ParseInt(<span class="string">"0144"</span>,<span class="number">8</span>,<span class="number">32</span>)     <span class="comment">//100</span></span><br><span class="line">c,_ := strconv.ParseInt(<span class="string">"0x64"</span>,<span class="number">16</span>,<span class="number">32</span>)    <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//十进制转到其他进制</span></span><br><span class="line">strconv.FormatInt(<span class="selector-tag">a</span>,<span class="number">2</span>)  <span class="comment">//1100100</span></span><br><span class="line">strconv.FormatInt(<span class="selector-tag">a</span>,<span class="number">8</span>)  <span class="comment">//144</span></span><br><span class="line">strconv.FormatInt(<span class="selector-tag">a</span>,<span class="number">16</span>) <span class="comment">//64</span></span><br></pre></td></tr></table></figure><p>注意浮点数 默认浮点类型是<code>float64</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a float32 = <span class="number">1.123456789</span></span><br><span class="line"><span class="keyword">var</span> b float32 = <span class="number">1.123456781</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> float32 = <span class="number">1.12345678</span></span><br><span class="line"><span class="built_in">println</span>(a, b, <span class="built_in">c</span>)</span><br><span class="line"><span class="built_in">println</span>(a == b, b == <span class="built_in">c</span>, a == <span class="built_in">c</span>)</span><br><span class="line">fmt.<span class="type">Printf</span>(<span class="string">"%v,%v,%v"</span>, a, b, <span class="built_in">c</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+<span class="number">1.123457e</span>+<span class="number">000</span> +<span class="number">1.123457e</span>+<span class="number">000</span> +<span class="number">1.123457e</span>+<span class="number">000</span></span><br><span class="line"><span class="literal">true</span> <span class="literal">true</span> <span class="literal">true</span></span><br><span class="line"><span class="number">1.1234568</span>,<span class="number">1.1234568</span>,<span class="number">1.1234568</span></span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>byte 是 uint8 别名<br>rune 是 int32 别名<br>别名类型不需要转换可以直接赋值，比如下面这样没有问题。但是注意了，就算你在32操作系统上int 并不等于int32，在64位系统上int 并不等于int64</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">byte</span> = <span class="number">0x11</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">uint8</span> = x</span><br><span class="line"><span class="keyword">var</span> z <span class="keyword">uint8</span> = x + y</span><br><span class="line">test(z)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(x <span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>特指slice，map，chan 这三类<br>内置函数new按指定类型长度分配零值内存，返回指针，并不关心类型内部构造和初始化方式，而引用类型必须要使用make来创建，编译器会将make转为目标类型专用的创建函数（或指令），以确保全部内存分配和相关属性初始化。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>不⽀支持隐式类型转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="keyword">byte</span>(a)</span><br><span class="line">c := a + <span class="keyword">int</span>(b) <span class="comment">//混合表达式 必须保持类型一致，a自动推断为</span></span><br><span class="line"><span class="keyword">int</span> 所以a + 后面的也必须是<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = <span class="keyword">int</span>(b) <span class="comment">// 显式转换</span></span><br><span class="line"><span class="built_in">println</span>(a, b, c) <span class="comment">//10，10，20</span></span><br><span class="line"></span><br><span class="line">d := <span class="keyword">bool</span>(a) <span class="comment">//这里就有问题了</span></span><br></pre></td></tr></table></figure><p>如果转换的目标是<code>指针</code>，<code>单向通道</code>或者是<code>没有返回值的函数</code>,必须要使用括号。避免造成语法分析错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d := (*<span class="keyword">int</span>)(&amp;a)   <span class="comment">//0xc000032780</span></span><br><span class="line">e := (&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)(ch)</span><br><span class="line">f := (<span class="function"><span class="keyword">func</span><span class="params">()</span>)<span class="params">(x)</span></span></span><br><span class="line">g := <span class="function"><span class="keyword">func</span><span class="params">()</span><span class="title">int</span><span class="params">(x)</span> //有返回值的可以省略括号</span></span><br></pre></td></tr></table></figure><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>使用关键字<code>type</code>定义，包括基于现有基础类型创建或者是结构体、函数类型等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> flag <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">read flag = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">write</span><br><span class="line">exec</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">f := read | exec</span><br><span class="line">fmt.Printf(<span class="string">"%b\n"</span>,f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//101</span></span><br></pre></td></tr></table></figure><p>和var 、const 类似，多个type定义可以合并成组，可以在函数或者代码块内定义局部类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">user <span class="keyword">struct</span> &#123;             <span class="comment">//结构体类型</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">uint8</span></span><br><span class="line">&#125;</span><br><span class="line">event <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">bool</span>   //函数类型</span></span><br><span class="line">)</span><br><span class="line">u := user&#123;<span class="string">"huangby"</span>,<span class="number">30</span>&#125;</span><br><span class="line">fmt.Println(u)</span><br><span class="line"><span class="keyword">var</span> f event = <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(s)</span><br><span class="line"><span class="keyword">return</span> s !=<span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">f(<span class="string">"huangby"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="未命名类型"><a href="#未命名类型" class="headerlink" title="未命名类型"></a>未命名类型</h2><p>与有明确标识符的 bool、int、string 等类型相比，数组、切片、字典、通道等类型与具体类型的长度等属性有关，故称作为命了类型。<br>具有相同声明的未命名类型被视作同一类型。</p><ul><li>具有相同基类型的指针。</li><li>具有相同元素类型和长度的数组 array</li><li>具有相同元素类型的切片 slice</li><li>具有相同键值类型的字典  map</li><li>具有相同数据类型以及操作方向的通道 channel</li><li>具有相同字段序列（字段名、字段类型、标签、字段顺序）的结构体 struct</li><li>具有相同签名(参数和返回值，不包括参数名)的函数 func</li><li>具有相同方法集（方法名，方法签名）的接口 interface{}</li></ul><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>不能将内存地址与指针混为一谈<br>内存地址是内存中每个字节单元的唯一编号，指针则是一个实体。指针会分配内存空间，相当于一个专门用来保存地址的整形变量。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">             p := &amp;x             x:=100</span><br><span class="line"><span class="params">------------</span>|<span class="params">-------</span>|<span class="params">----</span>\\<span class="params">----</span>|<span class="params">---------</span>|<span class="params">-----</span></span><br><span class="line">memory.<span class="string">..</span>   |0x1200 |   ····   | 100     |</span><br><span class="line"><span class="params">------------</span>|<span class="params">-------</span>|<span class="params">----</span>\\<span class="params">----</span>|<span class="params">---------</span>|<span class="params">-----</span></span><br><span class="line">addr         0x80              0x1200 </span><br><span class="line"><span class="params">-----------------------------------------------</span></span><br></pre></td></tr></table></figure><ul><li><code>&amp;</code>符号用来获取对象地址</li><li>指针运算符<code>*</code>用于间接引用目标对象</li><li>二级指针 ** T,如包含包名则写成*package T</li></ul><p>并非所有的对象都能进行取地址操作，但变量总是能正确返回。指针运算符为左值时(*a = 20)，可以更新目标对象状态，而为右值时(a := *b)，则是为了获取目标状态。<br>指针支持相等运算，单不支持加减法和类型转换。</p><p>可以通过unsafe.Pointer将指针转换为 uintptr 后加减运算，但可能会造成非法访问。</p><p>Pointer类似于C中的void* 万能指针，可以用来转换指针类型。它能安全持有对象或对象成员，但是 uintptr 不行。uintptr 仅是一种特殊整形，并不引用目标对象，无法阻止垃圾回收器回收对象内存。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span>,<span class="selector-tag">b</span>  struct&#123;&#125;</span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(&amp;a,&amp;b)</span></span>           <span class="comment">//都是0x---------</span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(&amp;a==&amp;b ,&amp;a==nil)</span></span> <span class="comment">//第一个不一定true  但是第二个肯定false</span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>对复合类型（数组，切片，字典，结构体）变量初始化时，有一些语法限制。</p><ul><li>初始化表达式必须含有类型标签</li><li>左花括号必须在类型尾部，不能另起一行</li><li>多个成员初始值以逗号分隔</li><li>允许多行，但是每行必须以逗号或者右花括号结束。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span>&#123;</span><br><span class="line">x <span class="keyword">int</span></span><br><span class="line">s <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a data = data&#123;<span class="number">1</span>,<span class="string">"abc"</span>&#125;</span><br><span class="line">b := data&#123;<span class="number">2</span>,<span class="string">"def"</span>&#125;</span><br><span class="line">c := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>:<span class="string">"huangby"</span>,<span class="string">"addr"</span>:<span class="string">"beijing"</span>&#125;</span><br><span class="line">d := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"huangby"</span>, <span class="string">"addr"</span>: <span class="string">"beijing"</span>&#125;</span><br><span class="line">d[<span class="string">"a"</span>] = <span class="string">"acd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是</span></span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">d[<span class="string">"a"</span>] = <span class="string">"acd"</span> 这就不行了</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;长度&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;说明&lt;
      
    
    </summary>
    
    
      <category term="golang" scheme="https://devying.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://devying.github.io/tags/golang/"/>
    
  </entry>
  
</feed>

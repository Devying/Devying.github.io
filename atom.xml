<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>熠熙轻雷</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://devying.github.io/"/>
  <updated>2019-11-09T08:06:25.349Z</updated>
  <id>https://devying.github.io/</id>
  
  <author>
    <name>Devying</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang性能分析工具</title>
    <link href="https://devying.github.io/2019/11/09/golang%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>https://devying.github.io/2019/11/09/golang性能分析工具/</id>
    <published>2019-11-08T16:23:02.000Z</published>
    <updated>2019-11-09T08:06:25.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a>pprof</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>pprof 类似于php的xhprof，在代码运行期间进行CPU、内存等指标采样，拿到采样数据后可以进行分析，还可以绘制成可视化的图，方便排查性能瓶颈。在go语言中使用的是官方提供的两个包<code>runtime/pprof</code>和<code>net/http/pprof</code>，分别用在脚本方式运行的程序和http server方式运行的程序中。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li>CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置</li><li>Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏</li><li>Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置</li><li>Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况</li></ul><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="演示1：分析一个简单的脚本性能。"><a href="#演示1：分析一个简单的脚本性能。" class="headerlink" title="演示1：分析一个简单的脚本性能。"></a>演示1：分析一个简单的脚本性能。</h5><p>由于<code>runtime/pprof</code>包没有封装使用起来不方便，可以使用<code>github.com/pkg/profile</code>替换。<br>操作步骤:</p><ul><li>执行脚本得到分析样本</li><li>使用go tool pprof 命令分析样本 <blockquote><p>go tool pprof [-http=:8080] [binfile] pproffile</p></blockquote></li></ul><h5 id="演示2：分析task-center服务CPU概况。"><a href="#演示2：分析task-center服务CPU概况。" class="headerlink" title="演示2：分析task_center服务CPU概况。"></a>演示2：分析task_center服务CPU概况。</h5><p>操作步骤:</p><ul><li>执行压测命令wrk<blockquote><p>wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址</p></blockquote></li><li>采集样本<blockquote><p>go tool pprof -seconds=3 <a href="http://10.77..39.89:6608/debug/pprof/profile" target="_blank" rel="noopener">http://10.77..39.89:6608/debug/pprof/profile</a><br>注意这个seconds 不要超过http设置的WriteTimeout值。</p></blockquote></li><li>使用go tool pprof 命令分析样本 <blockquote><p>go tool pprof [-http=:8080] [binfile] pprof_file</p></blockquote><h5 id="演示3：分析task-center服务内存概况。"><a href="#演示3：分析task-center服务内存概况。" class="headerlink" title="演示3：分析task_center服务内存概况。"></a>演示3：分析task_center服务内存概况。</h5></li></ul><p>操作步骤:</p><ul><li>执行压测命令wrk<blockquote><p>wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址</p></blockquote></li><li>采集样本<blockquote><p>go tool  pprof  -seconds=3  <a href="http://127.0.0.1:8080/debug/pprof/heap" target="_blank" rel="noopener">http://127.0.0.1:8080/debug/pprof/heap</a><br>默认情况下只分析当前活跃对象使用到的内存 可以追加 <code>-alloc_objects</code>(临时分配内存) <code>-inuse_objects</code>（正在使用的对象分配内存） <code>-alloc_space</code>(自程序运行依赖一共分配了多少内存) <code>-inuse_space</code>(常驻内存)等选项查看相应的内存概况</p></blockquote></li><li>使用go tool pprof 命令分析样本 <blockquote><p>go tool pprof [-http=:8080] [binfile] pprof_file</p></blockquote></li></ul><h3 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>在引入执行trace程序之前，已经有了pprof内存和CPU分析器，那么为什么它还会被添加到官方的工具链中呢？虽然CPU分析器做了一件很好的工作，告诉你什么函数占用了最多的CPU时间，但它并不能帮助你确定是什么阻止了goroutine运行，或者在可用的OS线程上如何调度goroutines。这正是跟踪器真正起作用的地方。trace设计文档很好地解释了跟踪程序背后的动机以及它是如何被设计和工作的。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="演示1：分析一个简单的脚本trace信息"><a href="#演示1：分析一个简单的脚本trace信息" class="headerlink" title="演示1：分析一个简单的脚本trace信息"></a>演示1：分析一个简单的脚本trace信息</h5><p>操作步骤:</p><ul><li>执行脚本得到分析样本</li><li>使用go tool trace 命令分析样本 <blockquote><p>go tool trace trace_file</p></blockquote></li></ul><h5 id="演示2：分析task-center的trace信息"><a href="#演示2：分析task-center的trace信息" class="headerlink" title="演示2：分析task_center的trace信息"></a>演示2：分析task_center的trace信息</h5><p>操作步骤:</p><ul><li><p>执行压测命令wrk</p><blockquote><p>wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址</p></blockquote></li><li><p>采集样本</p><blockquote><p>curl <a href="http://127.0.0.1:6608/debug/pprof/trace" target="_blank" rel="noopener">http://127.0.0.1:6608/debug/pprof/trace</a>  &gt; trace.out</p></blockquote></li><li><p>使用go tool pprof 命令分析样本 </p><blockquote><p>go tool trace [-http=addr:port] trace_file</p></blockquote></li></ul><h4 id="指标含义"><a href="#指标含义" class="headerlink" title="指标含义"></a>指标含义</h4><h5 id="View-trace"><a href="#View-trace" class="headerlink" title="View trace"></a>View trace</h5><p>最复杂、最强大和交互式的可视化显示了整个程序执行的时间轴。这个视图显示了在每个虚拟处理器上运行着什么，以及什么是被阻塞等待运行的。</p><h5 id="Goroutine-analysis"><a href="#Goroutine-analysis" class="headerlink" title="Goroutine analysis"></a>Goroutine analysis</h5><p>显示了在整个执行过程中，每种类型的goroutines是如何创建的。在选择一种类型之后就可以看到关于这种类型的goroutine的信息。例如，在试图从mutex获取锁、从网络读取、运行等等每个goroutine被阻塞的时间。</p><h5 id="Network-Sync-Syscall-blocking-profile"><a href="#Network-Sync-Syscall-blocking-profile" class="headerlink" title="Network/Sync/Syscall blocking profile"></a>Network/Sync/Syscall blocking profile</h5><p>这些图表显示了goroutines在这些资源上所花费的时间。它们非常接近pprof上的内存/cpu分析。这是分析锁竞争的最佳选择。</p><h5 id="Scheduler-latency-profiler"><a href="#Scheduler-latency-profiler" class="headerlink" title="Scheduler latency profiler"></a>Scheduler latency profiler</h5><p>为调度器级别的信息提供计时功能，显示调度在哪里最耗费时间。</p><p>###参考</p><ul><li><a href="https://www.youtube.com/watch?v=nok0aYiGiYA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=nok0aYiGiYA</a></li><li><a href="https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/" target="_blank" rel="noopener">https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/</a></li><li><a href="https://www.itcodemonkey.com/article/5419.html" target="_blank" rel="noopener">https://www.itcodemonkey.com/article/5419.html</a></li><li><a href="https://making.pusher.com/go-tool-trace/" target="_blank" rel="noopener">https://making.pusher.com/go-tool-trace/</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/pkg/profile"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := profile.Start(profile.CPUProfile,profile.ProfilePath(<span class="string">"./"</span>))</span><br><span class="line"><span class="keyword">defer</span> p.Stop()</span><br><span class="line">f, err := os.OpenFile(<span class="string">"/Users/baoying5/Downlosdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfadfasdfasdfasdfasdfads/new.csv"</span>, os.O_RDONLY, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">bfio := bufio.NewReader(f)</span><br><span class="line"></span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">b := <span class="number">0</span></span><br><span class="line">am := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line">bm := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">l, _, err := bfio.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">uid, err := strconv.Atoi(<span class="keyword">string</span>(l))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> uid &gt; <span class="number">3000232374</span> &#123;</span><br><span class="line">a++</span><br><span class="line">am[uid] = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b++</span><br><span class="line">bm[uid] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//println(string(l))</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"qc:admins"</span> <span class="attr">content</span>=<span class="string">"465267610762567726375"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 新元素 | 菜鸟教程<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'dns-prefetch'</span> <span class="attr">href</span>=<span class="string">'//s.w.org'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://www.runoob.com/html/html5-new-element.html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"HTML5 新元素"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pprof&quot;&gt;&lt;a href=&quot;#pprof&quot; class=&quot;headerlink&quot; title=&quot;pprof&quot;&gt;&lt;/a&gt;pprof&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介
      
    
    </summary>
    
    
    
      <category term="golang" scheme="https://devying.github.io/tags/golang/"/>
    
      <category term="工具" scheme="https://devying.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>

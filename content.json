{"meta":{"title":"熠熙轻雷","subtitle":"blog","description":"","author":"Devying","url":"https://devying.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-11-09T14:31:33.179Z","updated":"2019-11-07T10:29:47.428Z","comments":false,"path":"/404.html","permalink":"https://devying.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2019-11-09T14:31:33.201Z","updated":"2019-11-07T10:29:47.429Z","comments":false,"path":"books/index.html","permalink":"https://devying.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-11-09T14:31:33.193Z","updated":"2019-11-09T13:26:46.966Z","comments":false,"path":"about/index.html","permalink":"https://devying.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-09T14:31:33.202Z","updated":"2019-11-07T10:29:47.429Z","comments":false,"path":"categories/index.html","permalink":"https://devying.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-11-09T14:31:33.206Z","updated":"2019-11-07T10:29:47.429Z","comments":false,"path":"repository/index.html","permalink":"https://devying.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-11-09T14:31:33.205Z","updated":"2019-11-07T10:29:47.429Z","comments":true,"path":"links/index.html","permalink":"https://devying.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-09T14:33:21.781Z","updated":"2019-11-09T14:33:21.781Z","comments":false,"path":"tags/index.html","permalink":"https://devying.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"golang性能分析工具","slug":"golang性能分析工具","date":"2019-11-08T16:23:02.000Z","updated":"2019-11-09T08:06:25.349Z","comments":true,"path":"2019/11/09/golang性能分析工具/","link":"","permalink":"https://devying.github.io/2019/11/09/golang%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/","excerpt":"","text":"pprof介绍pprof 类似于php的xhprof，在代码运行期间进行CPU、内存等指标采样，拿到采样数据后可以进行分析，还可以绘制成可视化的图，方便排查性能瓶颈。在go语言中使用的是官方提供的两个包runtime/pprof和net/http/pprof，分别用在脚本方式运行的程序和http server方式运行的程序中。 功能 CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置 Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏 Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置 Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况 使用方法演示1：分析一个简单的脚本性能。由于runtime/pprof包没有封装使用起来不方便，可以使用github.com/pkg/profile替换。操作步骤: 执行脚本得到分析样本 使用go tool pprof 命令分析样本 go tool pprof [-http=:8080] [binfile] pproffile 演示2：分析task_center服务CPU概况。操作步骤: 执行压测命令wrk wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址 采集样本 go tool pprof -seconds=3 http://10.77..39.89:6608/debug/pprof/profile注意这个seconds 不要超过http设置的WriteTimeout值。 使用go tool pprof 命令分析样本 go tool pprof [-http=:8080] [binfile] pprof_file 演示3：分析task_center服务内存概况。 操作步骤: 执行压测命令wrk wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址 采集样本 go tool pprof -seconds=3 http://127.0.0.1:8080/debug/pprof/heap默认情况下只分析当前活跃对象使用到的内存 可以追加 -alloc_objects(临时分配内存) -inuse_objects（正在使用的对象分配内存） -alloc_space(自程序运行依赖一共分配了多少内存) -inuse_space(常驻内存)等选项查看相应的内存概况 使用go tool pprof 命令分析样本 go tool pprof [-http=:8080] [binfile] pprof_file trace介绍在引入执行trace程序之前，已经有了pprof内存和CPU分析器，那么为什么它还会被添加到官方的工具链中呢？虽然CPU分析器做了一件很好的工作，告诉你什么函数占用了最多的CPU时间，但它并不能帮助你确定是什么阻止了goroutine运行，或者在可用的OS线程上如何调度goroutines。这正是跟踪器真正起作用的地方。trace设计文档很好地解释了跟踪程序背后的动机以及它是如何被设计和工作的。 使用方法演示1：分析一个简单的脚本trace信息操作步骤: 执行脚本得到分析样本 使用go tool trace 命令分析样本 go tool trace trace_file 演示2：分析task_center的trace信息操作步骤: 执行压测命令wrk wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址 采集样本 curl http://127.0.0.1:6608/debug/pprof/trace &gt; trace.out 使用go tool pprof 命令分析样本 go tool trace [-http=addr:port] trace_file 指标含义View trace最复杂、最强大和交互式的可视化显示了整个程序执行的时间轴。这个视图显示了在每个虚拟处理器上运行着什么，以及什么是被阻塞等待运行的。 Goroutine analysis显示了在整个执行过程中，每种类型的goroutines是如何创建的。在选择一种类型之后就可以看到关于这种类型的goroutine的信息。例如，在试图从mutex获取锁、从网络读取、运行等等每个goroutine被阻塞的时间。 Network/Sync/Syscall blocking profile这些图表显示了goroutines在这些资源上所花费的时间。它们非常接近pprof上的内存/cpu分析。这是分析锁竞争的最佳选择。 Scheduler latency profiler为调度器级别的信息提供计时功能，显示调度在哪里最耗费时间。 ###参考 https://www.youtube.com/watch?v=nok0aYiGiYA https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/ https://www.itcodemonkey.com/article/5419.html https://making.pusher.com/go-tool-trace/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package mainimport ( \"bufio\" \"fmt\" \"io\" \"os\" \"strconv\" \"github.com/pkg/profile\")func main() &#123; p := profile.Start(profile.CPUProfile,profile.ProfilePath(\"./\")) defer p.Stop() f, err := os.OpenFile(\"/Users/baoying5/Downlosdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfadfasdfasdfasdfasdfads/new.csv\", os.O_RDONLY, os.ModePerm) if err != nil &#123; panic(err) &#125; defer f.Close() bfio := bufio.NewReader(f) a := 0 b := 0 am := make(map[int]bool) bm := make(map[int]bool) for &#123; l, _, err := bfio.ReadLine() if err != nil &amp;&amp; err != io.EOF &#123; panic(err) &#125; if err == io.EOF &#123; break &#125; uid, err := strconv.Atoi(string(l)) if err != nil &#123; panic(err) &#125; if uid &gt; 3000232374 &#123; a++ am[uid] = true &#125; else &#123; b++ bm[uid] = true &#125; //println(string(l)) &#125; fmt.Println(a, b)&#125; 1234567891011&lt;!Doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; &lt;meta property=\"qc:admins\" content=\"465267610762567726375\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;HTML5 新元素 | 菜鸟教程&lt;/title&gt; &lt;link rel='dns-prefetch' href='//s.w.org' /&gt;&lt;link rel=\"canonical\" href=\"http://www.runoob.com/html/html5-new-element.html\" /&gt;&lt;meta name=\"keywords\" content=\"HTML5 新元素\"&gt;","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"https://devying.github.io/tags/golang/"},{"name":"工具","slug":"工具","permalink":"https://devying.github.io/tags/%E5%B7%A5%E5%85%B7/"}]}]}
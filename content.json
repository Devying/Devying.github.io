{"meta":{"title":"熠熙轻雷","subtitle":"blog","description":"","author":"Devying","url":"https://devying.github.io","root":"/"},"pages":[],"posts":[{"title":"golang性能分析工具","slug":"golang性能分析工具","date":"2019-11-08T16:23:02.000Z","updated":"2019-11-09T08:06:25.349Z","comments":true,"path":"2019/11/09/golang性能分析工具/","link":"","permalink":"https://devying.github.io/2019/11/09/golang%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/","excerpt":"","text":"pprof介绍pprof 类似于php的xhprof，在代码运行期间进行CPU、内存等指标采样，拿到采样数据后可以进行分析，还可以绘制成可视化的图，方便排查性能瓶颈。在go语言中使用的是官方提供的两个包runtime/pprof和net/http/pprof，分别用在脚本方式运行的程序和http server方式运行的程序中。 功能 CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置 Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏 Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置 Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况 使用方法演示1：分析一个简单的脚本性能。由于runtime/pprof包没有封装使用起来不方便，可以使用github.com/pkg/profile替换。操作步骤: 执行脚本得到分析样本 使用go tool pprof 命令分析样本 go tool pprof [-http=:8080] [binfile] pproffile 演示2：分析task_center服务CPU概况。操作步骤: 执行压测命令wrk wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址 采集样本 go tool pprof -seconds=3 http://10.77..39.89:6608/debug/pprof/profile注意这个seconds 不要超过http设置的WriteTimeout值。 使用go tool pprof 命令分析样本 go tool pprof [-http=:8080] [binfile] pprof_file 演示3：分析task_center服务内存概况。 操作步骤: 执行压测命令wrk wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址 采集样本 go tool pprof -seconds=3 http://127.0.0.1:8080/debug/pprof/heap默认情况下只分析当前活跃对象使用到的内存 可以追加 -alloc_objects(临时分配内存) -inuse_objects（正在使用的对象分配内存） -alloc_space(自程序运行依赖一共分配了多少内存) -inuse_space(常驻内存)等选项查看相应的内存概况 使用go tool pprof 命令分析样本 go tool pprof [-http=:8080] [binfile] pprof_file trace介绍在引入执行trace程序之前，已经有了pprof内存和CPU分析器，那么为什么它还会被添加到官方的工具链中呢？虽然CPU分析器做了一件很好的工作，告诉你什么函数占用了最多的CPU时间，但它并不能帮助你确定是什么阻止了goroutine运行，或者在可用的OS线程上如何调度goroutines。这正是跟踪器真正起作用的地方。trace设计文档很好地解释了跟踪程序背后的动机以及它是如何被设计和工作的。 使用方法演示1：分析一个简单的脚本trace信息操作步骤: 执行脚本得到分析样本 使用go tool trace 命令分析样本 go tool trace trace_file 演示2：分析task_center的trace信息操作步骤: 执行压测命令wrk wrk [-t线程数] [-c并发数] [-d压测时间] 接口地址 采集样本 curl http://127.0.0.1:6608/debug/pprof/trace &gt; trace.out 使用go tool pprof 命令分析样本 go tool trace [-http=addr:port] trace_file 指标含义View trace最复杂、最强大和交互式的可视化显示了整个程序执行的时间轴。这个视图显示了在每个虚拟处理器上运行着什么，以及什么是被阻塞等待运行的。 Goroutine analysis显示了在整个执行过程中，每种类型的goroutines是如何创建的。在选择一种类型之后就可以看到关于这种类型的goroutine的信息。例如，在试图从mutex获取锁、从网络读取、运行等等每个goroutine被阻塞的时间。 Network/Sync/Syscall blocking profile这些图表显示了goroutines在这些资源上所花费的时间。它们非常接近pprof上的内存/cpu分析。这是分析锁竞争的最佳选择。 Scheduler latency profiler为调度器级别的信息提供计时功能，显示调度在哪里最耗费时间。 ###参考 https://www.youtube.com/watch?v=nok0aYiGiYA https://artem.krylysov.com/blog/2017/03/13/profiling-and-optimizing-go-web-applications/ https://www.itcodemonkey.com/article/5419.html https://making.pusher.com/go-tool-trace/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package mainimport ( \"bufio\" \"fmt\" \"io\" \"os\" \"strconv\" \"github.com/pkg/profile\")func main() &#123; p := profile.Start(profile.CPUProfile,profile.ProfilePath(\"./\")) defer p.Stop() f, err := os.OpenFile(\"/Users/baoying5/Downlosdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfadfasdfasdfasdfasdfads/new.csv\", os.O_RDONLY, os.ModePerm) if err != nil &#123; panic(err) &#125; defer f.Close() bfio := bufio.NewReader(f) a := 0 b := 0 am := make(map[int]bool) bm := make(map[int]bool) for &#123; l, _, err := bfio.ReadLine() if err != nil &amp;&amp; err != io.EOF &#123; panic(err) &#125; if err == io.EOF &#123; break &#125; uid, err := strconv.Atoi(string(l)) if err != nil &#123; panic(err) &#125; if uid &gt; 3000232374 &#123; a++ am[uid] = true &#125; else &#123; b++ bm[uid] = true &#125; //println(string(l)) &#125; fmt.Println(a, b)&#125; 1234567891011&lt;!Doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; &lt;meta property=\"qc:admins\" content=\"465267610762567726375\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;HTML5 新元素 | 菜鸟教程&lt;/title&gt; &lt;link rel='dns-prefetch' href='//s.w.org' /&gt;&lt;link rel=\"canonical\" href=\"http://www.runoob.com/html/html5-new-element.html\" /&gt;&lt;meta name=\"keywords\" content=\"HTML5 新元素\"&gt;","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"https://devying.github.io/tags/golang/"},{"name":"工具","slug":"工具","permalink":"https://devying.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"欢迎使用马克飞向","slug":"马克飞向","date":"2019-11-08T16:23:02.000Z","updated":"2019-11-09T09:16:44.847Z","comments":true,"path":"2019/11/09/马克飞向/","link":"","permalink":"https://devying.github.io/2019/11/09/%E9%A9%AC%E5%85%8B%E9%A3%9E%E5%90%91/","excerpt":"","text":"欢迎使用马克飞象@(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 [TOC] Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Cmd + /查看帮助。 代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' LaTeX 公式可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式： $$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图语法以及时序图语法。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： 已完成事项 待办事项1 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 注意：目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 注意：虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关设置右侧系统菜单（快捷键Cmd + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键帮助 Cmd + /同步文档 Cmd + S创建文档 Cmd + Opt + N最大化编辑器 Cmd + Enter预览文档 Cmd + Opt + Enter文档管理 Cmd + O系统菜单 Cmd + M 加粗 Cmd + B插入图片 Cmd + G插入链接 Cmd + L提升标题 Cmd + H 关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 反馈与建议 微博：@马克飞象，@GGock 邮箱：&#x68;&#117;&#115;&#116;&#x67;&#111;&#x63;&#x6b;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109; 感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。 [^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"https://devying.github.io/tags/golang/"},{"name":"工具","slug":"工具","permalink":"https://devying.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Hello World World World World World World World World World","slug":"hello-world","date":"2019-11-07T10:28:01.073Z","updated":"2019-11-09T06:08:52.914Z","comments":true,"path":"2019/11/07/hello-world/","link":"","permalink":"https://devying.github.io/2019/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}